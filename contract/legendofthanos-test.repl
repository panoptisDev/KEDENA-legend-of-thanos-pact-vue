;;////////////////////
;;COIN ACCOUNT STUFF
;;////////////////////

;; Enable the table gas model
(env-gasmodel "table")
(env-gaslimit 150000)

(begin-tx)
(env-gas 0) (env-gaslog)
(load "fungible-v2.pact")
(env-gaslog)
(expect
  "Gas cost of loading fungible contract"
  840 (env-gas))

(env-gas 0) (env-gaslog)
(load "coin.pact")
(env-gaslog)
(expect
  "Gas cost of loading coin contract"
  3301 (env-gas))

(create-table coin.coin-table)
(create-table coin.allocation-table)

(commit-tx)

(verify 'coin)

;; Account creation and account details unit tests
(begin-tx)
(env-data { "k:emily" : ["keys1"], "admin-legendofthanos": ["keys2"], "legendofthanos-bank": ["keys3"], "k:doug": ["keys4"] })
(env-keys ["keys1", "keys2", "keys3", "keys4"])
(define-keyset "k:emily" (read-keyset "k:emily"))
(define-keyset 'admin-legendofthanos (read-keyset "admin-legendofthanos"))
(define-keyset 'legendofthanos-bank (read-keyset "legendofthanos-bank"))
(define-keyset "k:doug" (read-keyset "k:doug"))

(env-gas 0) (env-gaslog)
(use coin)
(env-gaslog)
(expect
  "Gas cost of using the coin contract"
  2 (env-gas))

;; create accounts should succeed and initialize with correct amounts and guards
(env-gas 0) (env-gaslog)
(create-account "k:emily" (read-keyset "k:emily"))
(create-account 'admin-legendofthanos (read-keyset 'admin-legendofthanos))
(create-account 'legendofthanos-bank (read-keyset 'legendofthanos-bank))
(create-account "k:doug" (read-keyset "k:doug"))
(env-gaslog)
(expect
  "Gas cost of coin contract account creation"
  749 (env-gas))

; check account balances for newly created accounts
(env-gas 0) (env-gaslog)
(expect
  "initial balance at 0.0"
  0.0
  (get-balance "k:emily"))
(env-gaslog)
(expect
  "Gas cost of querying an account's balance"
  16 (env-gas))

(commit-tx)

;; credits + debits should succeed. Both should reflect the correct balance

(begin-tx)

(use coin)

(env-gas 0) (env-gaslog)
(test-capability (DEBIT "k:emily"))
(env-gaslog)
(expect
  "Gas cost of testing the DEBIT capability"
  26 (env-gas))

; credit tests
(test-capability (CREDIT "k:emily"))
(credit "k:emily" (read-keyset "k:emily") 100.0)

(test-capability (CREDIT "k:doug"))
(credit "k:doug" (read-keyset "k:doug") 75.0)

(expect
  "account balance reflects credit"
  100.0
  (get-balance "k:emily"))

(test-capability (CREDIT "admin-legendofthanos"))
(credit 'admin-legendofthanos (read-keyset 'admin-legendofthanos) 50.0)

(expect
  "account balance reflects credit"
  50.0
  (get-balance 'admin-legendofthanos))

(commit-tx)


;;;;;;;;;;;;;;;;;;;;;;;;;
;;LEGEND OF THANOS TESTS
;;;;;;;;;;;;;;;;;;;;;;;;;;


(begin-tx)

(define-namespace 'test (sig-keyset) (sig-keyset))
(env-data { 'ns: 'test })
(load "legendofthanos-poly-fungible-v1.pact")
(env-gas 0) (env-gaslog)
(env-gaslog)
(env-gas 0) (env-gaslog)
(load "legendofthanos.pact")
(env-gaslog)
(env-gas 0) (env-gaslog)
(create-table test.legendofthanos.supplies-table)
(create-table test.legendofthanos.ledger)
(create-table test.legendofthanos.uri-table)
(env-gaslog)
(commit-tx)


;(verify "test.legendofthanos")

;Create account test
(begin-tx)

(env-data { "k:emily" : ["keys1"], "admin-legendofthanos": ["keys2"], "legendofthanos-bank": ["keys3"], "k:doug": ["keys4"], "prev-block-hash": "lPqiP54vy_E3rAkvgQVme2FreVXpVhOV3dIJYENZ2Zk" })
(env-keys ["keys1", "keys2", "keys3", "keys4"])
(define-keyset "k:emily" (read-keyset "k:emily"))
(define-keyset "k:doug" (read-keyset "k:doug"))
(define-keyset 'admin-legendofthanos (read-keyset "admin-legendofthanos"))
(define-keyset 'legendofthanos-bank (read-keyset "legendofthanos-bank"))
(test.legendofthanos.create-account "TestMintBurn" "k:emily" (read-keyset "k:emily"))
(test.legendofthanos.get-balance "TestMintBurn" "k:emily")
(commit-tx)

;Testing URI set and get
(begin-tx)
(use test.legendofthanos)
(test.legendofthanos.set-uri "http://www.testapi.com/")
(test.legendofthanos.uri "testEndpointID")
(commit-tx)

;;Buying 1 staff with k:emily
(begin-tx)
(use coin)
(get-balance "k:emily")
(get-balance 'legendofthanos-bank)
(use test.legendofthanos)
(test-capability (coin.TRANSFER "k:emily" "legendofthanos-bank" 0.1))
(test.legendofthanos.buy-staff "k:emily" (read-keyset "k:emily") 0.1)
(test.legendofthanos.get-balance "STAFF" "k:emily")
(test.legendofthanos.total-supply "STAFF")
(use coin)
(get-balance "k:emily")
(get-balance 'legendofthanos-bank)
(commit-tx)

;;Buying another staff with k:emily
(begin-tx)
(use coin)
(get-balance "k:emily")
(get-balance 'legendofthanos-bank)
(use test.legendofthanos)
(test-capability (coin.TRANSFER "k:emily" "legendofthanos-bank" 0.1))
(test.legendofthanos.buy-staff "k:emily" (read-keyset "k:emily") 0.1)
(test.legendofthanos.get-balance "STAFF" "k:emily")
(test.legendofthanos.total-supply "STAFF")
(use coin)
(get-balance "k:emily")
(get-balance 'legendofthanos-bank)
(commit-tx)

;;Buying 1 Bow with k:emily
(begin-tx)
(use coin)
(get-balance "k:emily")
(get-balance 'legendofthanos-bank)
(use test.legendofthanos)
(test-capability (coin.TRANSFER "k:emily" "legendofthanos-bank" 0.5))
(test.legendofthanos.buy-bow "k:emily" (read-keyset "k:emily") 0.5)
(test.legendofthanos.get-balance "BOW" "k:emily")
(test.legendofthanos.total-supply "BOW")
(use coin)
(get-balance "k:emily")
(get-balance 'legendofthanos-bank)
(commit-tx)

;;Buying 1 sword with k:emily
(begin-tx)
(use coin)
(get-balance "k:emily")
(get-balance 'legendofthanos-bank)
(use test.legendofthanos)
(test-capability (coin.TRANSFER "k:emily" "legendofthanos-bank" 1.0))
(test.legendofthanos.buy-sword "k:emily" (read-keyset "k:emily") 1.0)
(test.legendofthanos.get-balance "SWORD" "k:emily")
(test.legendofthanos.total-supply "SWORD")
(use coin)
(get-balance "k:emily")
(get-balance 'legendofthanos-bank)
(commit-tx)

;Testing Poly fungible 1 transfer-create from emily to doug
(begin-tx)
(use test.legendofthanos)
(env-data { "k:emily" : ["keys1"], "admin-legendofthanos": ["keys2"], "legendofthanos-bank": ["keys3"], "k:doug": ["keys4"], "prev-block-hash": "lPqiP54vy_E3rAkvgQVme2FreVXpVhOV3dIJYENZ2Zk" })
(env-keys ["keys1", "keys2", "keys3", "keys4"])
(define-keyset "k:emily" (read-keyset "k:emily"))
(define-keyset "k:doug" (read-keyset "k:doug"))
(define-keyset 'admin-legendofthanos (read-keyset "admin-legendofthanos"))
(define-keyset 'legendofthanos-bank (read-keyset "legendofthanos-bank"))
(test-capability (TRANSFER "STAFF" "k:emily" "k:doug" 1.0))
(test.legendofthanos.transfer-create "STAFF" "k:emily" "k:doug" (read-keyset "k:doug") 1.0)
(test.legendofthanos.get-balance "STAFF" "k:emily")
(test.legendofthanos.get-balance "STAFF" "k:doug")
(commit-tx)

;Test get total supply
(begin-tx)
(use test.legendofthanos)
(test.legendofthanos.total-supply "STAFF")
(test.legendofthanos.total-supply "BOW")
(test.legendofthanos.total-supply "SWORD")
(commit-tx)

;Test get ledger details
(begin-tx)
(use test.legendofthanos)
(test.legendofthanos.details "STAFF" "k:emily")
(commit-tx)

;Test get balance
(begin-tx)
(use test.legendofthanos)
(test.legendofthanos.get-balance "STAFF" "k:emily")
(test.legendofthanos.get-balance "BOW" "k:emily")
(test.legendofthanos.get-balance "SWORD" "k:emily")
(test.legendofthanos.get-balance "STAFF" "k:doug")
(test.legendofthanos.get-balance "BOW" "k:doug")
(test.legendofthanos.get-balance "SWORD" "k:doug")
(commit-tx)
